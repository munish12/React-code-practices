{"ast":null,"code":"// UseStateCodeSnippet.js\nexport const UseMemoCodeSnippet = `\nimport React, { useMemo, useState } from 'react'\nimport { Button, ButtonGroup } from 'react-bootstrap'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { UseMemoCodeSnippet } from './UseMemoCodeSnippet'\nimport { initialItems } from '../../../utils/utils'\n\n\nconst UseMemo = () => {\n  const [count, setCount] = useState(0)\n  const [items] = useState(initialItems)\n  // Expensive operation\n  const selectedItems = items.find(item => item.isSelected)\n  // Use memo\n  const selectedItem = useMemo(\n    () => items.find((item) => item.id === count),\n    [count, items],\n  )\n\n  return (\n    <>\n      <h1>\n        UseMemo is a hook that memorizes a value and returns the same value\n        until any of the depencies in the dependency array changes untill then\n        it will recompute a new value.\n      </h1>\n      <h2>Count: {count}</h2>\n      <h2>Selected Item: {selectedItem ? \\`Item \\${selectedItem.id} is selected\\` : 'None'}</h2>\n      <ButtonGroup size='lg' aria-label='Basic example'>\n        <Button onClick={() => setCount(count + 1)}>Increment</Button>\n      </ButtonGroup>\n      <SyntaxHighlighter language='javascript' style={dark}>\n        {UseMemoCodeSnippet.trim()}\n      </SyntaxHighlighter>\n    </>\n  )\n}\n\nexport default UseMemo\n\n`;","map":{"version":3,"names":["UseMemoCodeSnippet"],"sources":["/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useMemo/UseMemoCodeSnippet.js"],"sourcesContent":["// UseStateCodeSnippet.js\nexport const UseMemoCodeSnippet = `\nimport React, { useMemo, useState } from 'react'\nimport { Button, ButtonGroup } from 'react-bootstrap'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { UseMemoCodeSnippet } from './UseMemoCodeSnippet'\nimport { initialItems } from '../../../utils/utils'\n\n\nconst UseMemo = () => {\n  const [count, setCount] = useState(0)\n  const [items] = useState(initialItems)\n  // Expensive operation\n  const selectedItems = items.find(item => item.isSelected)\n  // Use memo\n  const selectedItem = useMemo(\n    () => items.find((item) => item.id === count),\n    [count, items],\n  )\n\n  return (\n    <>\n      <h1>\n        UseMemo is a hook that memorizes a value and returns the same value\n        until any of the depencies in the dependency array changes untill then\n        it will recompute a new value.\n      </h1>\n      <h2>Count: {count}</h2>\n      <h2>Selected Item: {selectedItem ? \\`Item \\${selectedItem.id} is selected\\` : 'None'}</h2>\n      <ButtonGroup size='lg' aria-label='Basic example'>\n        <Button onClick={() => setCount(count + 1)}>Increment</Button>\n      </ButtonGroup>\n      <SyntaxHighlighter language='javascript' style={dark}>\n        {UseMemoCodeSnippet.trim()}\n      </SyntaxHighlighter>\n    </>\n  )\n}\n\nexport default UseMemo\n\n`;\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}