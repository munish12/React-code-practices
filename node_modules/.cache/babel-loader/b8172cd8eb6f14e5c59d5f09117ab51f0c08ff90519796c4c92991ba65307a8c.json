{"ast":null,"code":"import _slicedToArray from\"/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useMemo,useState}from'react';import{Button,ButtonGroup}from'react-bootstrap';import{Prism as SyntaxHighlighter}from'react-syntax-highlighter';import{dark}from'react-syntax-highlighter/dist/esm/styles/prism';import{UseMemoCodeSnippet}from'./UseMemoCodeSnippet';import{initialItems}from'./utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var UseMemo=function UseMemo(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),count=_useState2[0],setCount=_useState2[1];var _useState3=useState(initialItems),_useState4=_slicedToArray(_useState3,1),items=_useState4[0];// Expensive operation\n// const selectedItems = items.find(item => item.isSelected)\n// Use memo\nvar selectedItem=useMemo(function(){return items.find(function(item){return item.id===count;});},[count,items]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"UseMemo is a hook that memorizes a value and returns the same value until any of the depencies in the dependency array changes untill then it will recompute a new value.\"}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Count: \",count]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Selected Item: \",selectedItem?\"Item \".concat(selectedItem.id,\" is selected\"):'None']}),/*#__PURE__*/_jsx(ButtonGroup,{size:\"lg\",\"aria-label\":\"Basic example\",children:/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return setCount(count+1);},children:\"Increment\"})}),/*#__PURE__*/_jsx(SyntaxHighlighter,{language:\"javascript\",style:dark,children:UseMemoCodeSnippet.trim()})]});};export default UseMemo;","map":{"version":3,"names":["React","useMemo","useState","Button","ButtonGroup","Prism","SyntaxHighlighter","dark","UseMemoCodeSnippet","initialItems","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","UseMemo","_useState","_useState2","_slicedToArray","count","setCount","_useState3","_useState4","items","selectedItem","find","item","id","children","concat","size","onClick","language","style","trim"],"sources":["/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useMemo/UseMemo.jsx"],"sourcesContent":["import React, { useMemo, useState } from 'react'\nimport { Button, ButtonGroup } from 'react-bootstrap'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { UseMemoCodeSnippet } from './UseMemoCodeSnippet'\nimport { initialItems } from './utils'\n\n\n\nconst UseMemo = () => {\n  const [count, setCount] = useState(0)\n  const [items] = useState(initialItems)\n  // Expensive operation\n  // const selectedItems = items.find(item => item.isSelected)\n  // Use memo\n  const selectedItem = useMemo(\n    () => items.find((item) => item.id === count),\n    [count, items],\n  )\n\n  return (\n    <>\n      <h4>\n        UseMemo is a hook that memorizes a value and returns the same value\n        until any of the depencies in the dependency array changes untill then\n        it will recompute a new value.\n      </h4>\n      <h2>Count: {count}</h2>\n      <h2>Selected Item: {selectedItem ? `Item ${selectedItem.id} is selected` : 'None'}</h2>\n      <ButtonGroup size='lg' aria-label='Basic example'>\n        <Button onClick={() => setCount(count + 1)}>Increment</Button>\n      </ButtonGroup>\n      <SyntaxHighlighter language='javascript' style={dark}>\n        {UseMemoCodeSnippet.trim()}\n      </SyntaxHighlighter>\n    </>\n  )\n}\n\nexport default UseMemo\n"],"mappings":"gJAAA,MAAO,CAAAA,KAAK,EAAIC,OAAO,CAAEC,QAAQ,KAAQ,OAAO,CAChD,OAASC,MAAM,CAAEC,WAAW,KAAQ,iBAAiB,CACrD,OAASC,KAAK,GAAI,CAAAC,iBAAiB,KAAQ,0BAA0B,CACrE,OAASC,IAAI,KAAQ,gDAAgD,CACrE,OAASC,kBAAkB,KAAQ,sBAAsB,CACzD,OAASC,YAAY,KAAQ,SAAS,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAItC,GAAM,CAAAC,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAA,CAAS,CACpB,IAAAC,SAAA,CAA0Bf,QAAQ,CAAC,CAAC,CAAC,CAAAgB,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA9BG,KAAK,CAAAF,UAAA,IAAEG,QAAQ,CAAAH,UAAA,IACtB,IAAAI,UAAA,CAAgBpB,QAAQ,CAACO,YAAY,CAAC,CAAAc,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAA/BE,KAAK,CAAAD,UAAA,IACZ;AACA;AACA;AACA,GAAM,CAAAE,YAAY,CAAGxB,OAAO,CAC1B,iBAAM,CAAAuB,KAAK,CAACE,IAAI,CAAC,SAACC,IAAI,QAAK,CAAAA,IAAI,CAACC,EAAE,GAAKR,KAAK,GAAC,GAC7C,CAACA,KAAK,CAAEI,KAAK,CACf,CAAC,CAED,mBACEX,KAAA,CAAAE,SAAA,EAAAc,QAAA,eACElB,IAAA,OAAAkB,QAAA,CAAI,2KAIJ,CAAI,CAAC,cACLhB,KAAA,OAAAgB,QAAA,EAAI,SAAO,CAACT,KAAK,EAAK,CAAC,cACvBP,KAAA,OAAAgB,QAAA,EAAI,iBAAe,CAACJ,YAAY,SAAAK,MAAA,CAAWL,YAAY,CAACG,EAAE,iBAAiB,MAAM,EAAK,CAAC,cACvFjB,IAAA,CAACP,WAAW,EAAC2B,IAAI,CAAC,IAAI,CAAC,aAAW,eAAe,CAAAF,QAAA,cAC/ClB,IAAA,CAACR,MAAM,EAAC6B,OAAO,CAAE,SAAAA,QAAA,QAAM,CAAAX,QAAQ,CAACD,KAAK,CAAG,CAAC,CAAC,EAAC,CAAAS,QAAA,CAAC,WAAS,CAAQ,CAAC,CACnD,CAAC,cACdlB,IAAA,CAACL,iBAAiB,EAAC2B,QAAQ,CAAC,YAAY,CAACC,KAAK,CAAE3B,IAAK,CAAAsB,QAAA,CAClDrB,kBAAkB,CAAC2B,IAAI,CAAC,CAAC,CACT,CAAC,EACpB,CAAC,CAEP,CAAC,CAED,cAAe,CAAAnB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}