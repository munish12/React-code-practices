{"ast":null,"code":"// UseMemoCodeSnippet.js\nexport const UseMemoCodeSnippet = `\nimport React, { useMemo, useState } from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { initialItems } from '../../../utils/utils'; // Adjust the path as needed\n\nconst UseMemoExample = () => {\n  const [count, setCount] = useState(0);\n  const [items] = useState(initialItems);\n\n  // Use useMemo to memoize the selected item based on count\n  const selectedItem = useMemo(() => items.find((item) => item.id === count), [count, items]);\n\n  return (\n    <>\n      <h1>UseMemo Example</h1>\n      <h2>Count: {count}</h2>\n      <h2>Selected Item: {selectedItem ? \\`Item \\${selectedItem.id} is selected\\` : 'None'}</h2>\n      <ButtonGroup size='lg' aria-label='Basic example'>\n        <Button onClick={() => setCount(count + 1)}>Increment</Button>\n      </ButtonGroup>\n    </>\n  );\n};\n\nexport default UseMemoExample;\n`.trim(); // Use .trim() here to ensure no leading/trailing whitespace","map":{"version":3,"names":["UseMemoCodeSnippet","trim"],"sources":["/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useMemo/UseMemoCodeSnippet.js"],"sourcesContent":["// UseMemoCodeSnippet.js\nexport const UseMemoCodeSnippet = `\nimport React, { useMemo, useState } from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { initialItems } from '../../../utils/utils'; // Adjust the path as needed\n\nconst UseMemoExample = () => {\n  const [count, setCount] = useState(0);\n  const [items] = useState(initialItems);\n\n  // Use useMemo to memoize the selected item based on count\n  const selectedItem = useMemo(() => items.find((item) => item.id === count), [count, items]);\n\n  return (\n    <>\n      <h1>UseMemo Example</h1>\n      <h2>Count: {count}</h2>\n      <h2>Selected Item: {selectedItem ? \\`Item \\${selectedItem.id} is selected\\` : 'None'}</h2>\n      <ButtonGroup size='lg' aria-label='Basic example'>\n        <Button onClick={() => setCount(count + 1)}>Increment</Button>\n      </ButtonGroup>\n    </>\n  );\n};\n\nexport default UseMemoExample;\n`.trim(); // Use .trim() here to ensure no leading/trailing whitespace\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}