{"ast":null,"code":"var _jsxFileName = \"/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useMemo/UseMemo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState } from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { UseMemoCodeSnippet } from './UseMemoCodeSnippet';\nimport { initialItems } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UseMemo = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  // const [items] = useState(initialItems)\n  // Expensive operation\n  // const selectedItems = items.find(item => item.isSelected)\n  // Use memo\n  const selectedItem = useMemo(() => items.find(item => item.id === count), [count, items]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"UseMemo is a hook that memorizes a value and returns the same value until any of the depencies in the dependency array changes untill then it will recompute a new value.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Selected Item: \", selectedItem ? `Item ${selectedItem.id} is selected` : 'None']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      size: \"lg\",\n      \"aria-label\": \"Basic example\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setCount(count + 1),\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      language: \"javascript\",\n      style: dark,\n      children: UseMemoCodeSnippet.trim()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(UseMemo, \"yLTiImGaq4EwF/JIXQGmKv3y4ak=\");\n_c = UseMemo;\nexport default UseMemo;\nvar _c;\n$RefreshReg$(_c, \"UseMemo\");","map":{"version":3,"names":["React","useMemo","useState","Button","ButtonGroup","Prism","SyntaxHighlighter","dark","UseMemoCodeSnippet","initialItems","jsxDEV","_jsxDEV","Fragment","_Fragment","UseMemo","_s","count","setCount","selectedItem","items","find","item","id","children","fileName","_jsxFileName","lineNumber","columnNumber","size","onClick","language","style","trim","_c","$RefreshReg$"],"sources":["/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useMemo/UseMemo.jsx"],"sourcesContent":["import React, { useMemo, useState } from 'react'\nimport { Button, ButtonGroup } from 'react-bootstrap'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { UseMemoCodeSnippet } from './UseMemoCodeSnippet'\nimport { initialItems } from './utils'\n\n\n\nconst UseMemo = () => {\n  const [count, setCount] = useState(0)\n  // const [items] = useState(initialItems)\n  // Expensive operation\n  // const selectedItems = items.find(item => item.isSelected)\n  // Use memo\n  const selectedItem = useMemo(\n    () => items.find((item) => item.id === count),\n    [count, items],\n  )\n\n  return (\n    <>\n      <h4>\n        UseMemo is a hook that memorizes a value and returns the same value\n        until any of the depencies in the dependency array changes untill then\n        it will recompute a new value.\n      </h4>\n      <h2>Count: {count}</h2>\n      <h2>Selected Item: {selectedItem ? `Item ${selectedItem.id} is selected` : 'None'}</h2>\n      <ButtonGroup size='lg' aria-label='Basic example'>\n        <Button onClick={() => setCount(count + 1)}>Increment</Button>\n      </ButtonGroup>\n      <SyntaxHighlighter language='javascript' style={dark}>\n        {UseMemoCodeSnippet.trim()}\n      </SyntaxHighlighter>\n    </>\n  )\n}\n\nexport default UseMemo\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAChD,SAASC,MAAM,EAAEC,WAAW,QAAQ,iBAAiB;AACrD,SAASC,KAAK,IAAIC,iBAAiB,QAAQ,0BAA0B;AACrE,SAASC,IAAI,QAAQ,gDAAgD;AACrE,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,YAAY,QAAQ,SAAS;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAItC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACrC;EACA;EACA;EACA;EACA,MAAMgB,YAAY,GAAGjB,OAAO,CAC1B,MAAMkB,KAAK,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,KAAK,CAAC,EAC7C,CAACA,KAAK,EAAEG,KAAK,CACf,CAAC;EAED,oBACER,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAIJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLhB,OAAA;MAAAY,QAAA,GAAI,SAAO,EAACP,KAAK;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBhB,OAAA;MAAAY,QAAA,GAAI,iBAAe,EAACL,YAAY,GAAI,QAAOA,YAAY,CAACI,EAAG,cAAa,GAAG,MAAM;IAAA;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvFhB,OAAA,CAACP,WAAW;MAACwB,IAAI,EAAC,IAAI;MAAC,cAAW,eAAe;MAAAL,QAAA,eAC/CZ,OAAA,CAACR,MAAM;QAAC0B,OAAO,EAAEA,CAAA,KAAMZ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;QAAAO,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eACdhB,OAAA,CAACL,iBAAiB;MAACwB,QAAQ,EAAC,YAAY;MAACC,KAAK,EAAExB,IAAK;MAAAgB,QAAA,EAClDf,kBAAkB,CAACwB,IAAI,CAAC;IAAC;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAAA,eACpB,CAAC;AAEP,CAAC;AAAAZ,EAAA,CA5BKD,OAAO;AAAAmB,EAAA,GAAPnB,OAAO;AA8Bb,eAAeA,OAAO;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}