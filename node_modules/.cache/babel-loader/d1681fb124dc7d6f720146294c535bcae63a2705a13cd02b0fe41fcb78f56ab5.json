{"ast":null,"code":"var _jsxFileName = \"/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useContext/UseContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { UseContextCodeSnippet } from './UseContextCodeSnippet';\nimport Usestate from '../useState/Usestate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n// Provider Component\nexport const ThemeProvider = ({\n  children\n}) => {\n  const [theme, setTheme] = Usestate('light');\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n};\n// Custom hook for consuming the context\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst UseContext = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"The useContext hook in React is a function that allows you to consume context objects in function components. It simplifies the process of accessing global state and functions, making it easier to share these across your application without prop drilling. When you use useContext, your component will re-render whenever the context value changes.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      language: \"javascript\",\n      style: dark,\n      children: UseContextCodeSnippet.trim()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c2 = UseContext;\nexport default UseContext;\nvar _c, _c2;\n$RefreshReg$(_c, \"ThemeProvider\");\n$RefreshReg$(_c2, \"UseContext\");","map":{"version":3,"names":["React","createContext","useContext","Prism","SyntaxHighlighter","dark","UseContextCodeSnippet","Usestate","jsxDEV","_jsxDEV","Fragment","_Fragment","ThemeContext","ThemeProvider","children","theme","setTheme","toggleTheme","prevTheme","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s","UseContext","language","style","trim","_c2","$RefreshReg$"],"sources":["/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useContext/UseContext.jsx"],"sourcesContent":["import React, { createContext, useContext } from 'react'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { UseContextCodeSnippet } from './UseContextCodeSnippet'\nimport Usestate from '../useState/Usestate'\n\nconst ThemeContext = createContext()\n// Provider Component\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = Usestate('light')\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'))\n  }\n  return <ThemeContext.Provider>{children}</ThemeContext.Provider>\n}\n// Custom hook for consuming the context\n\nexport const useTheme = () => useContext(ThemeContext)\n\nconst UseContext = () => {\n  return (\n    <>\n      <h4>\n        The useContext hook in React is a function that allows you to consume\n        context objects in function components. It simplifies the process of\n        accessing global state and functions, making it easier to share these\n        across your application without prop drilling. When you use useContext,\n        your component will re-render whenever the context value changes.\n      </h4>\n\n      <SyntaxHighlighter language='javascript' style={dark}>\n        {UseContextCodeSnippet.trim()}\n      </SyntaxHighlighter>\n    </>\n  )\n}\n\nexport default UseContext\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,SAASC,KAAK,IAAIC,iBAAiB,QAAQ,0BAA0B;AACrE,SAASC,IAAI,QAAQ,gDAAgD;AACrE,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,OAAOC,QAAQ,MAAM,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,YAAY,gBAAGX,aAAa,CAAC,CAAC;AACpC;AACA,OAAO,MAAMY,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;EAE3C,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAACE,SAAS,IAAKA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACnE,CAAC;EACD,oBAAOT,OAAA,CAACG,YAAY,CAACO,QAAQ;IAAAL,QAAA,EAAEA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAwB,CAAC;AAClE,CAAC;AACD;AAAAC,EAAA,GARaX,aAAa;AAU1B,OAAO,MAAMY,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMxB,UAAU,CAACU,YAAY,CAAC;AAAA;AAAAc,EAAA,CAAzCD,QAAQ;AAErB,MAAME,UAAU,GAAGA,CAAA,KAAM;EACvB,oBACElB,OAAA,CAAAE,SAAA;IAAAG,QAAA,gBACEL,OAAA;MAAAK,QAAA,EAAI;IAMJ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAELd,OAAA,CAACL,iBAAiB;MAACwB,QAAQ,EAAC,YAAY;MAACC,KAAK,EAAExB,IAAK;MAAAS,QAAA,EAClDR,qBAAqB,CAACwB,IAAI,CAAC;IAAC;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA,eACpB,CAAC;AAEP,CAAC;AAAAQ,GAAA,GAhBKJ,UAAU;AAkBhB,eAAeA,UAAU;AAAA,IAAAH,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}