{"ast":null,"code":"var _jsxFileName = \"/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useContext/UseContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { UseContextCodeSnippet } from './UseContextCodeSnippet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UseContext = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"The useState hook in React is a function that lets you add state management to function components. By calling useState, you create a single piece of state associated with that component. The hook returns an array containing the current state value and a function to update it. This enables function components to have their own state, without needing to convert them into class components.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      size: \"lg\",\n      \"aria-label\": \"Basic example\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setCount(count + 1),\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => setCount(count - 1),\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      language: \"javascript\",\n      style: dark,\n      children: useContextCodeSnippet.trim()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(UseContext, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = UseContext;\nexport default UseContext;\nvar _c;\n$RefreshReg$(_c, \"UseContext\");","map":{"version":3,"names":["React","useState","Button","ButtonGroup","Prism","SyntaxHighlighter","dark","UseContextCodeSnippet","jsxDEV","_jsxDEV","Fragment","_Fragment","UseContext","_s","count","setCount","children","fileName","_jsxFileName","lineNumber","columnNumber","size","onClick","language","style","useContextCodeSnippet","trim","_c","$RefreshReg$"],"sources":["/home/munish/Desktop/PRACTICE PROJECT/React-code-practices/src/pages/hooks-explained/useContext/UseContext.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Button, ButtonGroup } from 'react-bootstrap'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport { UseContextCodeSnippet } from './UseContextCodeSnippet'\n\nconst UseContext = () => {\n  const [count, setCount] = useState(0)\n  return (\n    <>\n      <h4>\n        The useState hook in React is a function that lets you add state\n        management to function components. By calling useState, you create a\n        single piece of state associated with that component. The hook returns\n        an array containing the current state value and a function to update it.\n        This enables function components to have their own state, without\n        needing to convert them into class components.\n      </h4>\n      <h1>Count: {count}</h1>\n      <ButtonGroup size='lg' aria-label='Basic example'>\n        <Button onClick={() => setCount(count + 1)}>Increment</Button>\n        <Button onClick={() => setCount(count - 1)}>Decrement</Button>\n      </ButtonGroup>\n      <SyntaxHighlighter language='javascript' style={dark}>\n        {useContextCodeSnippet.trim()}\n      </SyntaxHighlighter>\n    </>\n  )\n}\n\nexport default UseContext\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,WAAW,QAAQ,iBAAiB;AACrD,SAASC,KAAK,IAAIC,iBAAiB,QAAQ,0BAA0B;AACrE,SAASC,IAAI,QAAQ,gDAAgD;AACrE,SAASC,qBAAqB,QAAQ,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACrC,oBACEQ,OAAA,CAAAE,SAAA;IAAAK,QAAA,gBACEP,OAAA;MAAAO,QAAA,EAAI;IAOJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLX,OAAA;MAAAO,QAAA,GAAI,SAAO,EAACF,KAAK;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBX,OAAA,CAACN,WAAW;MAACkB,IAAI,EAAC,IAAI;MAAC,cAAW,eAAe;MAAAL,QAAA,gBAC/CP,OAAA,CAACP,MAAM;QAACoB,OAAO,EAAEA,CAAA,KAAMP,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;QAAAE,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9DX,OAAA,CAACP,MAAM;QAACoB,OAAO,EAAEA,CAAA,KAAMP,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;QAAAE,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eACdX,OAAA,CAACJ,iBAAiB;MAACkB,QAAQ,EAAC,YAAY;MAACC,KAAK,EAAElB,IAAK;MAAAU,QAAA,EAClDS,qBAAqB,CAACC,IAAI,CAAC;IAAC;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA,eACpB,CAAC;AAEP,CAAC;AAAAP,EAAA,CAtBKD,UAAU;AAAAe,EAAA,GAAVf,UAAU;AAwBhB,eAAeA,UAAU;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}