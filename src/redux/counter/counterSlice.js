import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

const counterSlice = createSlice({
  name: "counter", // Name of the slice
  initialState: {
    value: 0, // Initial state of the slice
  },
  reducers: {
    // Reducer functions to handle state changes
    // Contains an object with key-value pairs, where each key represents a Redux action type and each value represents the corresponding reducer function.
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, () => {
        console.log("incrementAsync.pending");
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.value += action.payload;
      });
  },
});

export const incrementAsync = createAsyncThunk(
  "counter/incrementAsync",
  async (amount) => {
    await new Promise((resolve) => setTimeout(resolve, 1000));
    return amount;
  }
);

// Destructures the action creators (increment and decrement) from the counterSlice.actions object. These action creators are generated automatically by createSlice based on the provided reducer functions.
// Action creators are functions that return action objects, which are dispatched to update the Redux store state.
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// Exports the reducer function generated by createSlice. This function will handle state updates for the 'counter' slice.
export default counterSlice.reducer;
